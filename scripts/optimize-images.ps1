# Image Optimization Script cho eTax Mobile PWA (PowerShell)
# T√°c gi·∫£: Cirphe AI Assistant
# Ng√†y: 15/09/2025

Write-Host "üñºÔ∏è [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] B·∫Øt ƒë·∫ßu t·ªëi ∆∞u ·∫£nh - eTax Mobile PWA" -ForegroundColor Blue

# T·∫°o th∆∞ m·ª•c backup v√† optimized
if (-not (Test-Path "public/assets/backup")) {
    New-Item -ItemType Directory -Path "public/assets/backup" -Force
}
if (-not (Test-Path "public/assets/optimized")) {
    New-Item -ItemType Directory -Path "public/assets/optimized" -Force
}

# Backup ·∫£nh g·ªëc
Write-Host "üì¶ [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] Backup ·∫£nh g·ªëc..." -ForegroundColor Blue
$imageExtensions = @("*.png", "*.jpg", "*.jpeg")
foreach ($ext in $imageExtensions) {
    $images = Get-ChildItem -Path "public/assets" -Filter $ext
    foreach ($img in $images) {
        Copy-Item $img.FullName -Destination "public/assets/backup/" -Force
    }
}

# ƒê·∫øm s·ªë ·∫£nh
$totalImages = 0
foreach ($ext in $imageExtensions) {
    $count = (Get-ChildItem -Path "public/assets" -Filter $ext).Count
    $totalImages += $count
}
Write-Host "üìä [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] T·ªïng s·ªë ·∫£nh: $totalImages" -ForegroundColor Blue

# Ki·ªÉm tra ImageMagick
if (-not (Get-Command magick -ErrorAction SilentlyContinue)) {
    Write-Host "üîß [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] C√†i ƒë·∫∑t ImageMagick..." -ForegroundColor Yellow
    Write-Host "   Vui l√≤ng c√†i ƒë·∫∑t ImageMagick t·ª´: https://imagemagick.org/script/download.php#windows" -ForegroundColor Yellow
    Write-Host "   Ho·∫∑c s·ª≠ d·ª•ng Chocolatey: choco install imagemagick" -ForegroundColor Yellow
}

# Ki·ªÉm tra WebP tools
if (-not (Get-Command cwebp -ErrorAction SilentlyContinue)) {
    Write-Host "üîß [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] C√†i ƒë·∫∑t WebP tools..." -ForegroundColor Yellow
    Write-Host "   Vui l√≤ng c√†i ƒë·∫∑t WebP tools t·ª´: https://developers.google.com/speed/webp/download" -ForegroundColor Yellow
    Write-Host "   Ho·∫∑c s·ª≠ d·ª•ng Chocolatey: choco install webp" -ForegroundColor Yellow
}

# T·ªëi ∆∞u PNG
Write-Host "üéØ [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] T·ªëi ∆∞u PNG icons..." -ForegroundColor Blue
$pngImages = Get-ChildItem -Path "public/assets" -Filter "*.png"
foreach ($img in $pngImages) {
    $filename = [System.IO.Path]::GetFileNameWithoutExtension($img.Name)
    $dir = $img.DirectoryName
    
    Write-Host "  üñºÔ∏è Image: $filename - T·ªëi ∆∞u cho mobile" -ForegroundColor White
    
    # N√©n PNG
    if (Get-Command magick -ErrorAction SilentlyContinue) {
        try {
            magick $img.FullName -strip -quality 85 -define png:compression-level=6 "$dir/optimized/$filename.png"
        } catch {
            Write-Host "    ‚ö†Ô∏è Magick failed for $filename" -ForegroundColor Yellow
        }
    }
    
    # T·∫°o WebP version
    if (Get-Command cwebp -ErrorAction SilentlyContinue) {
        try {
            cwebp -q 85 -m 6 $img.FullName -o "$dir/optimized/$filename.webp"
        } catch {
            Write-Host "    ‚ö†Ô∏è WebP conversion failed for $filename" -ForegroundColor Yellow
        }
    }
}

# T·ªëi ∆∞u JPG
Write-Host "üéØ [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] T·ªëi ∆∞u JPG images..." -ForegroundColor Blue
$jpgImages = Get-ChildItem -Path "public/assets" -Filter "*.jpg"
$jpegImages = Get-ChildItem -Path "public/assets" -Filter "*.jpeg"
$allJpgImages = $jpgImages + $jpegImages

foreach ($img in $allJpgImages) {
    $filename = [System.IO.Path]::GetFileNameWithoutExtension($img.Name)
    $dir = $img.DirectoryName
    
    Write-Host "  üñºÔ∏è Image: $filename - T·ªëi ∆∞u JPG" -ForegroundColor White
    
    # N√©n JPG
    if (Get-Command magick -ErrorAction SilentlyContinue) {
        try {
            magick $img.FullName -strip -quality 85 -interlace JPEG "$dir/optimized/$filename.jpg"
        } catch {
            Write-Host "    ‚ö†Ô∏è Magick failed for $filename" -ForegroundColor Yellow
        }
    }
    
    # T·∫°o WebP version
    if (Get-Command cwebp -ErrorAction SilentlyContinue) {
        try {
            cwebp -q 85 -m 6 $img.FullName -o "$dir/optimized/$filename.webp"
        } catch {
            Write-Host "    ‚ö†Ô∏è WebP conversion failed for $filename" -ForegroundColor Yellow
        }
    }
}

# T·∫°o responsive images
Write-Host "üì± [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] T·∫°o responsive images..." -ForegroundColor Blue
$optimizedImages = Get-ChildItem -Path "public/assets/optimized" -Filter "*.png"
$optimizedImages += Get-ChildItem -Path "public/assets/optimized" -Filter "*.jpg"

foreach ($img in $optimizedImages) {
    $filename = [System.IO.Path]::GetFileNameWithoutExtension($img.Name)
    $ext = $img.Extension
    $dir = $img.DirectoryName
    
    if (Get-Command magick -ErrorAction SilentlyContinue) {
        try {
            # T·∫°o c√°c k√≠ch th∆∞·ªõc kh√°c nhau
            magick $img.FullName -resize 50% "$dir/${filename}_sm$ext"
            magick $img.FullName -resize 75% "$dir/${filename}_md$ext"
            magick $img.FullName -resize 125% "$dir/${filename}_lg$ext"
        } catch {
            Write-Host "    ‚ö†Ô∏è Responsive images failed for $filename" -ForegroundColor Yellow
        }
    }
}

# T√≠nh to√°n k√≠ch th∆∞·ªõc file
Write-Host "üìä [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] T√≠nh to√°n k√≠ch th∆∞·ªõc file..." -ForegroundColor Blue

$originalSize = 0
$optimizedSize = 0

if (Test-Path "public/assets/backup") {
    $originalFiles = Get-ChildItem -Path "public/assets/backup" -Recurse -File
    foreach ($file in $originalFiles) {
        $originalSize += $file.Length
    }
}

if (Test-Path "public/assets/optimized") {
    $optimizedFiles = Get-ChildItem -Path "public/assets/optimized" -Recurse -File
    foreach ($file in $optimizedFiles) {
        $optimizedSize += $file.Length
    }
}

$originalSizeMB = [math]::Round($originalSize / 1MB, 1)
$optimizedSizeMB = [math]::Round($optimizedSize / 1MB, 1)

Write-Host ""
Write-Host "üéâ [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [SUCCESS] T·ªëi ∆∞u ·∫£nh ho√†n t·∫•t!" -ForegroundColor Green
Write-Host "üìä [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] K·∫øt qu·∫£:" -ForegroundColor Blue
Write-Host "   - K√≠ch th∆∞·ªõc g·ªëc: $originalSizeMB MB" -ForegroundColor White
Write-Host "   - K√≠ch th∆∞·ªõc t·ªëi ∆∞u: $optimizedSizeMB MB" -ForegroundColor White
Write-Host "   - T·ªïng s·ªë ·∫£nh: $totalImages" -ForegroundColor White
Write-Host "   - ƒê·ªãnh d·∫°ng: PNG, JPG, WebP" -ForegroundColor White
Write-Host "   - Responsive: sm, md, lg sizes" -ForegroundColor White

Write-Host ""
Write-Host "üöÄ [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [INFO] C√°ch s·ª≠ d·ª•ng:" -ForegroundColor Blue
Write-Host "   1. Thay th·∫ø ƒë∆∞·ªùng d·∫´n ·∫£nh trong components" -ForegroundColor White
Write-Host "   2. S·ª≠ d·ª•ng WebP v·ªõi fallback PNG/JPG" -ForegroundColor White
Write-Host "   3. Lazy loading cho ·∫£nh ngo√†i viewport" -ForegroundColor White
Write-Host "   4. Preload ·∫£nh quan tr·ªçng trong index.html" -ForegroundColor White

Write-Host ""
Write-Host "‚ú® [$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')] [SUCCESS] Image optimization completed - Cirphe AI Assistant" -ForegroundColor Green